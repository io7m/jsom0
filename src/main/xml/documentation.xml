<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright © 2012 http://io7m.com

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted, provided that the above
  copyright notice and this permission notice appear in all copies.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  -->

<s:document
  xmlns:s="http://www.io7m.com/schemas/structural/1.0.0"
  xmlns:xi="http://www.w3.org/2001/XInclude">
  <s:document-title>io7m-jsom0 1.0.0 Documentation</s:document-title>
  <s:document-style>documentation.css</s:document-style>
  <s:document-contents/>

  <s:part>
    <s:part-title>Package Information</s:part-title>
    <s:part-contents />
    <s:section>
      <s:section-title>Orientation</s:section-title>
      <s:subsection>
        <s:subsection-title>Overview</s:subsection-title>
        <s:paragraph>
          The <s:term type="package">jsom0</s:term> implements a
          trivial format for 3D models and materials.  The intent is
          to provide a format that allows the construction of OpenGL
          vertex buffers during parsing so that large high-polygon
          models do not have to be kept in memory before being uploaded
          to the GPU.
        </s:paragraph>
      </s:subsection>
      <s:subsection>
        <s:subsection-title>Simplicity</s:subsection-title>
        <s:paragraph>
          The <s:term type="package">jsom0</s:term> formats are specified as LALR(1)
          grammars, making hand-parsing trivial. A lexer and a recursive descent
          parser are included.
        </s:paragraph>
      </s:subsection>
    </s:section>

    <s:section>
      <s:section-title>Installation</s:section-title>
      <s:subsection>
        <s:subsection-title>Source compilation</s:subsection-title>
        <s:paragraph>
          The project can be compiled and installed with
          <s:link-external target="http://maven.apache.org">Maven</s:link-external>:
        </s:paragraph>
        <s:paragraph>
          <s:verbatim type="example"><![CDATA[$ mvn -C clean install]]></s:verbatim>
        </s:paragraph>
      </s:subsection>
      <s:subsection>
        <s:subsection-title>Maven</s:subsection-title>
        <s:paragraph>
          Regular releases are made to the
          <s:link-external target="http://search.maven.org/#search|ga|1|jsom0">Central Repository</s:link-external>,
          so it's possible to use the <s:term type="package">jsom0</s:term>
          package in your projects with the following Maven dependency:
        </s:paragraph>
        <s:paragraph>
          <s:verbatim type="example"><![CDATA[<dependency>
  <groupId>com.io7m.jsom0.core</groupId>
  <artifactId>io7m-jsom0-core</artifactId>
  <version>1.0.0</version>
</dependency>]]></s:verbatim>
        </s:paragraph>
        <s:paragraph>
          All <s:link-external target="http://io7m.com">io7m.com</s:link-external>
          packages use Semantic Versioning
          <s:footnote>
            <s:link-external target="http://semver.org">http://semver.org</s:link-external>
          </s:footnote>, which implies that it is always safe to use version ranges
          with an exclusive upper bound equal to the next major version - the API of
          the package will not change in a backwards-incompatible manner before the
          next major version.
        </s:paragraph>
      </s:subsection>
    </s:section>

    <s:section>
      <s:section-title>Supported Systems</s:section-title>
      <s:paragraph>
        This release of the software passed 100% of the included unit tests on
        the following platforms:
      </s:paragraph>
      <s:formal-item kind="platform_table" type="platforms">
        <s:formal-item-title>Supported systems</s:formal-item-title>
        <s:table>
          <s:table-summary>Supported systems</s:table-summary>
          <s:table-head>
            <s:table-column-name>OS</s:table-column-name>
            <s:table-column-name>OS-Version</s:table-column-name>
            <s:table-column-name>OS-Arch</s:table-column-name>
            <s:table-column-name>JRE-Vendor</s:table-column-name>
            <s:table-column-name>JRE-Version</s:table-column-name>
            <s:table-column-name>JVM</s:table-column-name>
            <s:table-column-name>JVM-Vendor</s:table-column-name>
            <s:table-column-name>JVM-Version</s:table-column-name>
            <s:table-column-name>GL-Vendor</s:table-column-name>
            <s:table-column-name>GL-Renderer</s:table-column-name>
            <s:table-column-name>GL-Version</s:table-column-name>
          </s:table-head>
          <s:table-body>
<s:table-row xmlns:s="http://www.io7m.com/schemas/structural/1.0.0">
  <s:table-cell>Linux</s:table-cell>
  <s:table-cell>3.9.9-1-ARCH</s:table-cell>
  <s:table-cell>amd64</s:table-cell>
  <s:table-cell>Oracle Corporation</s:table-cell>
  <s:table-cell>1.7.0_40</s:table-cell>
  <s:table-cell>OpenJDK 64-Bit Server VM</s:table-cell>
  <s:table-cell>Oracle Corporation</s:table-cell>
  <s:table-cell>24.0-b50</s:table-cell>
  <s:table-cell>X.Org</s:table-cell>
  <s:table-cell>Gallium 0.4 on AMD RV730</s:table-cell>
  <s:table-cell>3.1 (Core Profile) Mesa 9.1.4</s:table-cell>
</s:table-row>
          </s:table-body>
        </s:table>
      </s:formal-item>
    </s:section>

    <s:section>
      <s:section-title>Platform Specific Issues</s:section-title>
      <s:paragraph>
        There are currently no known platform-specific issues.
      </s:paragraph>
    </s:section>

    <s:section>
      <s:section-title>License</s:section-title>
      <s:paragraph>
        All files distributed with the <s:term type="package">jsom0</s:term>
        package are placed under the following license:
        <s:verbatim type="license"><![CDATA[Copyright © 2013 <code@io7m.com> http://io7m.com

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.]]>
        </s:verbatim>
      </s:paragraph>
    </s:section>
  </s:part>
  
  <s:part>
  	<s:part-title>Specification</s:part-title>
  	<s:part-contents/>

    <s:section>
      <s:section-title>Overview</s:section-title>
      <s:paragraph>
        This section describes the syntax and semantics of the
        <s:term type="package">jsom0</s:term> model formats. It
        provides concrete syntax definitions given as
        <s:link-external target="http://en.wikipedia.org/wiki/EBNF">ISO/IEC 14977 EBNF</s:link-external>
        grammars, and type definitions given in the Gallina language of
        <s:link-external target="http://coq.inria.fr">Coq</s:link-external>.
      </s:paragraph>
    </s:section>

    <s:section xml:id="com.io7m.jsom0_1_0_0.specification.model">
      <s:section-title>Models</s:section-title>
      <s:subsection>
      	<s:subsection-title>Overview</s:subsection-title>
        <s:paragraph>
          <s:term type="term">Models</s:term> in the <s:term type="package">jsom0</s:term>
          package consist of a set of
          <s:link target="com.io7m.jsom0_1_0_0.specification.object">objects</s:link> with
          unique names.
        </s:paragraph>
      </s:subsection>
      <s:subsection>
      	<s:subsection-title>Syntax (concrete)</s:subsection-title>
  	    <s:paragraph>
  	      The concrete syntax for <s:term type="term">models</s:term> is
  	      defined by the following grammar:
  	    </s:paragraph>
  	    <s:formal-item kind="specifications">
  	      <s:formal-item-title>Model EBNF</s:formal-item-title>
  	      <s:verbatim><![CDATA[
model =
  object , { object } ;
]]></s:verbatim>
		</s:formal-item>
		<s:paragraph>
		  Informally, a <s:term type="term">model</s:term> is simply a
		  set of <s:link target="com.io7m.jsom0_1_0_0.specification.object">objects</s:link>
		  placed into a file in no particular order.
		</s:paragraph>
      </s:subsection>
    </s:section>

  	<s:section xml:id="com.io7m.jsom0_1_0_0.specification.object">
  	  <s:section-title>Objects</s:section-title>
      <s:subsection>
      	<s:subsection-title>Overview</s:subsection-title>
        <s:paragraph>
          <s:term type="term">Objects</s:term> in the <s:term type="package">jsom0</s:term>
          package consist of a set of vertices and an associated
          <s:link target="com.io7m.jsom0_1_0_0.specification.material">material</s:link>.
          Each vertex may be of one of two
          <s:link target="com.io7m.jsom0_1_0_0.specification.object.semantics">types</s:link>,
          but every vertex in the <s:term type="term">object</s:term> must be of the same type.
        </s:paragraph>
      </s:subsection>
  	  <s:subsection xml:id="com.io7m.jsom0_1_0_0.specification.object.syntax_concrete">
  	    <s:subsection-title>Syntax (concrete)</s:subsection-title>
  	    <s:paragraph>
  	      The concrete syntax for  is defined by the following
  	      grammar:
  	    </s:paragraph>
  	    <s:formal-item kind="specifications">
  	      <s:formal-item-title>Object EBNF</s:formal-item-title>
  	      <s:verbatim><![CDATA[
vertex_p3n3_name =
  "vertex_p3n3" ;

vertex_p3n3t2_name =
  "vertex_p3n3t2" ;

vertex_type =
  vertex_p3n3_name | vertex_p3n3t2_name ;

vertex_position =
  "position" , real , real , real , ";" ;

vertex_normal =
  "normal" , real , real , real , ";" ;

vertex_uv =
  "uv" , real , real , ";" ;

vertex_p3n3 =
  vertex_p3n3_name , vertex_position , vertex_normal , "end" , ";" ;

vertex_p3n3t2 =
  vertex_p3n3t2_name , vertex_position , vertex_normal , vertex_uv , "end" , ";" ;

vertex =
  vertex_p3n3 | vertex_p3n3t2 ;

vertex_array =
  "array" , positive , vertex_type , { vertex } , "end" , ";" ;

vertices =
  "vertices" , ";" , vertex_array , "end" , ";" ;

triangle =
  "triangle" , natural , natural , natural , ";" ;

triangle_array =
  "array" , positive, "triangle" , { triangle } , "end" , ";" ;

triangles =
  "triangles" , ";" , triangle_array , "end" , ";" ;

name =
  "name" , non_empty_string , ";" ;

material_name =
  "material_name" , non_empty_string , ";" ;

object =
  "object" , ";" ,
    name ,
    material_name ,
    vertices ,
    triangles ,
  "end" , ";" ;
]]></s:verbatim>
  	    </s:formal-item>
  	  </s:subsection>
  	  <s:subsection xml:id="com.io7m.jsom0_1_0_0.specification.object.semantics">
  	    <s:subsection-title>Semantics</s:subsection-title>
  	    <s:paragraph>
  	      The given <s:link target="com.io7m.jsom0_1_0_0.specification.object.syntax_concrete">concrete syntax</s:link>
  	      is mapped to the following set of types.
  	      The <s:link-external target="object.v">source code</s:link-external>
          to the development is <s:link-external target="object.v">included</s:link-external>
          with this specification.
  	    </s:paragraph>
  	    <s:formal-item kind="specifications">
  	      <s:formal-item-title>Object types</s:formal-item-title>
  	      <s:verbatim><![CDATA[
(** The type of strings, containing arbitrary UTF-8. *)
Axiom utf8_string : Set.

(** The type of real numbers, axiomatized here. *)
Axiom real : Set.

(** The type of positive integers. *)
Record positive := {
  value       : nat;
  value_range : value >= 0
}.

(** The type of three-dimensional vectors of real numbers. *)
Record vector3f := {
  v3x : real;
  v3y : real;
  v3z : real
}.

(** The type of two-dimensional vectors of real numbers. *)
Record vector2f := {
  v2x : real;
  v2y : real
}.

(** The type of vertices containing a 3D position and normal vector. *)
Inductive vertex_p3n3 := {
  vp3n3_position : vector3f;
  vp3n3_normal   : vector3f
}.

(** The type of vertices containing a 3D position and normal vector, and 2D UV coordinates. *)
Inductive vertex_p3n3t2 := {
  vp3n3t2_position : vector3f;
  vp3n3t2_normal   : vector3f;
  vp3n3t2_uv       : vector2f
}.

(** The type of arrays of length [n], holding elements of type [t]. *)
Axiom array : forall (n : positive) (t : Set), Set.

(** The type of triangles consisting of three indices into an array of vertices. *)
Record triangle := {
  v0 : nat;
  v1 : nat;
  v2 : nat
}.

(** A value of either type [A] or [B], but not both. *)
Inductive either (A B : Set) :=
  | left  : A -> either A B
  | right : B -> either A B.

(** A parsed object. *)
Record object := {
  name          : utf8_string;
  material_name : utf8_string;
  vertices      : forall n, either (array n vertex_p3n3) (array n vertex_p3n3t2);
  triangles     : forall n, array n triangle
}.]]>
  	      </s:verbatim>
  	    </s:formal-item>
  	    <s:paragraph>
  	      As is shown by the above set of types, the <s:term type="package">jsom0</s:term>
  	      object language defines a generic <s:term type="type">array</s:term> type. Values
  	      of the <s:term type="type">array</s:term> type are defined with the
  	      <s:term type="keyword">array</s:term> keyword given in the
  	      <s:link target="com.io7m.jsom0_1_0_0.specification.syntax_concrete">concrete syntax</s:link>
  	      which must be followed by a positive integer (denoting the size of the array)
  	      and the name of a type (denoting the type of elements in the array). All elements
  	      of the array must be of the same type.
  	    </s:paragraph>
  	  </s:subsection>
  	  <s:subsection>
  	    <s:subsection-title>Conventions</s:subsection-title>
  	    <s:paragraph>
  	      All vertex and normal data is specified in a right-handed coordinate
  	      system. Informally, this means that when viewed from the origin
  	      looking down the negative Z axis, the positive X axis runs right and
  	      the positive Y axis runs up, as shown by the following diagram:
  	    </s:paragraph>
        <s:formal-item kind="example">
          <s:formal-item-title>Right-handed coordinate system</s:formal-item-title>
          <s:image source="axes2.png">Right-handed coordinate system</s:image>
        </s:formal-item>
        <s:paragraph>
          Texture coordinate data is specified in a right-handed coordinate
          system, assuming that the bottom-left corner of the texture is
          the origin. That is, <s:term type="expression">(0, 0)</s:term>
          denotes the bottom left corner of the texture, and
          <s:term type="expression">(1, 1)</s:term> denotes the top right.
        </s:paragraph>
  	  </s:subsection>
  	</s:section>

  	<s:section xml:id="com.io7m.jsom0_1_0_0.specification.material">
  	  <s:section-title>Materials</s:section-title>
  	  <s:subsection xml:id="com.io7m.jsom0_1_0_0.specification.material.syntax_concrete">
  	    <s:subsection-title>Syntax (concrete)</s:subsection-title>
  	    <s:paragraph>
  	      The concrete syntax for materials is defined by the following
  	      grammar:
  	    </s:paragraph>
  	    <s:formal-item kind="specifications">
  	      <s:formal-item-title>Material EBNF</s:formal-item-title>
  	      <s:verbatim><![CDATA[   
name =
  "name" , non_empty_string , ";" ;

diffuse =
  "diffuse" , real , real , real , ";" ;

ambient =
  "ambient" , real , real , real , ";" ;

specular =
  "specular" , real , real , real , real , ";" ;

shininess =
  "shininess" , real , ";" ;

alpha =
  "alpha" , real , ";" ;

mapping =
  "map_chrome" | "map_uv" ;

texture =
  "texture" , non_empty_string , real , mapping , ";" ;

material =
  "material" , ";" ,
    name ,
    diffuse ,
    ambient ,
    specular ,
    shininess ,
    alpha ,
    [ texture ] ,
  "end" , ";" ;
]]></s:verbatim>
  	    </s:formal-item>
  	  </s:subsection>
  	  <s:subsection>
  	    <s:subsection-title>Syntax (typed, abstract)</s:subsection-title>
  	    <s:paragraph>
  	      The given <s:link target="com.io7m.jsom0_1_0_0.specification.material.syntax_concrete">concrete syntax</s:link>
  	      is mapped to the following set of types.
  	      The <s:link-external target="material.v">source code</s:link-external>
          to the development is <s:link-external target="material.v">included</s:link-external>
          with this specification.
  	    </s:paragraph>
  	    <s:formal-item kind="specifications">
  	      <s:formal-item-title>Object types</s:formal-item-title>
  	      <s:verbatim><![CDATA[
(** The type of strings, containing arbitrary UTF-8. *)
Axiom utf8_string : Set.

(** The type of real numbers, axiomatized here. *)
Axiom real : Set.

(** The type of real numbers in the range [0.0, 1.0]. *)
Axiom real_clamp : Set.

(** The type of RGB vectors. *)
Record rgb := {
  rgb_r : real_clamp;
  rgb_g : real_clamp;
  rgb_b : real_clamp
}.

(** The type of RGBA vectors. *)
Record rgba := {
  rgba_r : real_clamp;
  rgba_g : real_clamp;
  rgba_b : real_clamp;
  rgba_a : real_clamp
}.

(** The type of texture mapping. *)
Inductive mapping :=
  | Map_Chrome
  | Map_UV.

(** The type of textures. *)
Record texture := {
  t_name    : utf8_string;
  t_alpha   : real_clamp;
  t_mapping : mapping
}.

(** A parsed material. *)
Record material := {
  m_name      : utf8_string;
  m_diffuse   : rgb;
  m_ambient   : rgb;
  m_specular  : rgba;
  m_shininess : real;
  m_alpha     : real_clamp;
  m_texture   : option texture
}.]]>
  	      </s:verbatim>
  	    </s:formal-item>
  	    <s:paragraph>
  	      The <s:term type="package">jsom0</s:term>
  	      materials are expected to be used as input to the standard
  	      Phong <s:footnote><s:link-external target="http://en.wikipedia.org/wiki/Phong_reflection_model">http://en.wikipedia.org/wiki/Phong_reflection_model</s:link-external></s:footnote>
  	      illumination model algorithm.
  	    </s:paragraph>
  	    <s:paragraph>
  	      Materials have an optional texture component, which is blended
  	      over the diffuse colour to a degree specified by the associated
  	      alpha value. Textures may be mapped to models by UV coordinates
  	      (the <s:term type="constant">map_uv</s:term> type), or by accessing
  	      the texture using current vertex's normal vector directly (the
  	      <s:term type="constant">map_chrome</s:term> type, so called because
  	      the result resembles a metallic surface reflecting the texture).
  	      See the GLSL shaders included with the
  	      <s:term type="package">jsom0</s:term> demos for details.
  	    </s:paragraph>
  	    <s:formal-item kind="examples">
  	      <s:formal-item-title>UV mapping</s:formal-item-title>
  	      <s:image source="monkey0.png">UV mapping</s:image>
  	    </s:formal-item>
  	    <s:formal-item kind="examples">
  	      <s:formal-item-title>Chrome/Normal mapping</s:formal-item-title>
  	      <s:image source="monkey1.png">UV mapping</s:image>
  	    </s:formal-item>
  	  </s:subsection>
  	</s:section>
  	
  	<s:section xml:id="com.io7m.jsom0_1_0_0.specification.base_definitions">
  	  <s:section-title>Base definitions</s:section-title>
  	  <s:paragraph>
  	    All grammars defined rely on the following basic definitions:
  	  </s:paragraph>
  	  <s:formal-item kind="specifications">
  	    <s:formal-item-title>Basic definitions</s:formal-item-title>
  	    <s:verbatim><![CDATA[
character =
  "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" |
  "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" |
  "w" | "x" | "y" | "z" |
  "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" |
  "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" |
  "W" | "X" | "Y" | "Z" |
  "_" | "." | "-" |
  digit ;
  
string =
  { character } ;

non_empty_string =
  character , string ;

digit_without_zero =
  "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;

digit =
  "0" | digit_without_zero ;

positive =
  digit_without_zero , { digit } ;

natural =
  "0" | positive ;

real =
  [ "-" ] , digit , [ "." , { digit } ] ;]]>
  	    </s:verbatim>
  	  </s:formal-item>
  	</s:section>
  </s:part>

  <s:part>
    <s:part-title>API Reference</s:part-title>
    <s:part-contents/>
    <s:section>
      <s:section-title>Javadoc</s:section-title>
      <s:paragraph>
        API documentation for the package is provided via the
        included <s:link-external target="javadoc">Javadoc</s:link-external>.
      </s:paragraph>
    </s:section>
  </s:part>

</s:document>
